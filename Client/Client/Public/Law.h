#pragma once
#include "Player.h"

BEGIN(Client)
class CLaw final : public CPlayer
{
public:
	enum ANIM {
		BTL_ADVENT,

		BTL_ARISE_B,
		BTL_ARISE_F,

		BTL_ATTACK_BRAVE,
		BTL_ATTACK_BURN_KNUCKLE,
		BTL_ATTACK_ENHABAKUSAIKEN_END,
		BTL_ATTACK_ENHABAKUSAIKEN_LOOP,
		BTL_ATTACK_ENHABAKUSAIKEN_START,
		BTL_ATTACK_FLASH,
		BTL_ATTACK_FLASH_AIR,
		BTL_ATTACK_FLASH_LOOP,
		BTL_ATTACK_GARENKYAKU_START,
		BTL_ATTACK_GAROUHOUKO,
		BTL_ATTACK_HIENRENTENKYAKU,
		BTL_ATTACK_MUEISYOU,
		BTL_ATTACK_NORMAL_0,
		BTL_ATTACK_NORMAL_1,
		BTL_ATTACK_NORMAL_2,
		BTL_ATTACK_NORMAL_3,
		BTL_ATTACK_NORMAL_4,
		BTL_ATTACK_NORMAL_AIR_0,
		BTL_ATTACK_NORMAL_AIR_1,
		BTL_ATTACK_NORMAL_AIR_2,
		BTL_ATTACK_NORMAL_AIR_3,
		BTL_ATTACK_NORMAL_AIR_4,
		BTL_ATTACK_RENGADAN,
		BTL_ATTACK_SANKAMOUSYUUKYAKU_END,
		BTL_ATTACK_SANKAMOUSYUUKYAKU_LOOP,
		BTL_ATTACK_SANKAMOUSYUUKYAKU_START,
		BTL_ATTACK_STRIKE,
		BTL_ATTACK_STRIKE_AIR,
		BTL_ATTACK_STRIKE_AIR_SUB,
		BTL_ATTACK_STRIKE_START,
		BTL_ATTACK_STRIKE_SUB,
		BTL_ATTACK_TENKETUBAKUTAI,
		BTL_ATTACK_TYOURENGADAN,
		BTL_ATTACK_UKIGUMOHUUGA_START,

		BTL_BLOW_DOWN_F,

		BTL_DAMAGE_AIR_LARGE_B,
		BTL_DAMAGE_AIR_LARGE_F,
		BTL_DAMAGE_AIR_LARGE_L,
		BTL_DAMAGE_AIR_LARGE_R,
		BTL_DAMAGE_AIR_LOOP,
		BTL_DAMAGE_AIR_SMALL_B,
		BTL_DAMAGE_AIR_SMALL_F,
		BTL_DAMAGE_AIR_SMALL_L,
		BTL_DAMAGE_LARGE_B,
		BTL_DAMAGE_LARGE_F,
		BTL_DAMAGE_LARGE_L,
		BTL_DAMAGE_LARGE_R,
		BTL_DAMAGE_LOOP,
		BTL_DAMAGE_SMALL_B,
		BTL_DAMAGE_SMALL_F,
		BTL_DAMAGE_SMALL_L,
		BTL_DAMAGE_SMALL_R,

		BTL_DEAD,
		BTL_DOWN_B,
		BTL_DOWN_F,
		BTL_FALL,

		BTL_GUARD_HIT,
		BTL_GUARD_LOOP,
		BTL_GUARD_START,
		BTL_GUARD_WALK_B,
		BTL_GUARD_WALK_F,
		BTL_GUARD_WALK_L,
		BTL_GUARD_WALK_R,

		BTL_ITEM,
		BTL_JUMP,
		BTL_LAND,

		BTL_MOVE_BRAKE,
		BTL_MOVE_IDLE,
		BTL_MOVE_RUN,
		BTL_MOVE_WALK_B,
		BTL_MOVE_WALK_F,
		BTL_MOVE_WALK_L,
		BTL_MOVE_WALK_R,

		BTL_MYSTIC_GURENTENSYOU,
		BTL_MYSTIC_ZINRAIROUEIKYAKU,

		BTL_STEP_AIR,
		BTL_STEP_LAND,
		BTL_STEP_LAND_BACK,

		DASH,
		DASH_BREAK_START,
		DASH_BREAK_END,

		DOOR_OPEN_BOTH_HAND,
		DOOR_OPEN_RIGHT_HAND,

		IDLE,
		IDLE_TRANS_WALK,

		JUMP_LANDING,
		JUMP_LANDING_DAMAGE,
		JUMP_LANDING_HIGH,
		JUMP_LOOP,
		JUMP_START,
		JUMP_RUN_END,
		JUMP_RUN_LANDING,
		JUMP_RUN_LOOP,
		JUMP_RUN_START,

		RUN,
		RUN_BRAKE,

		TREASURE_OPEN,

		WALK,
		WALK_TRANS_IDLE_START,
		WALK_TRANS_IDLE_END,

		IDLE_SIDE,
		IDLE_TRANS_IDLE,
		IDLE_TRANS_IDLE_SIDE,
	};
private:
	CLaw(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	CLaw(const CLaw& rhs);
	virtual ~CLaw() = default;

public:
	virtual HRESULT Initialize_Prototype(void);
	virtual HRESULT Initialize(void* pArg);

public:
	virtual _bool Is_AnimationLoop(_uint eAnimId) override;

private:
	virtual HRESULT Ready_Parts(void) override;
	virtual HRESULT Ready_Components(void* pArg) override;
	HRESULT SetUp_ShaderResources(void);

public:
	static CLaw* Create(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	virtual CGameObject* Clone(void* pArg = nullptr);
	virtual void Free(void) override;
};
END